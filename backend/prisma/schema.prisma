// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model SystemUser {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  password  String
  role      String   @default("operator") // admin, operator, manager
  clientId  String?
  client    Client?  @relation(fields: [clientId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("system_users")
}

model Client {
  id            String   @id @default(cuid())
  name          String
  code          String?  @unique
  document      String?  @unique
  contactName   String?
  contactEmail  String?
  contactPhone  String?
  whatsappNumber String?
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  users         SystemUser[]
  sectors       Sector[]
  linenItems    LinenItem[]
  orders        Order[]
  cages         Cage[]
  weighingControls WeighingControl[]

  @@map("clients")
}

model Sector {
  id          String   @id @default(cuid())
  name        String
  description String?
  clientId    String
  client      Client   @relation(fields: [clientId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  beds        Bed[]

  @@map("sectors")
}

model Bed {
  id        String   @id @default(cuid())
  number    String
  sectorId  String
  sector    Sector   @relation(fields: [sectorId], references: [id], onDelete: Cascade)
  status    String   @default("free") // free, occupied
  token     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  distributedItems DistributedItem[]

  @@map("beds")
}

model LinenItem {
  id            String   @id @default(cuid())
  name          String
  sku           String
  unit          String   @default("un")
  currentStock  Int      @default(0)
  minimumStock  Int      @default(0)
  clientId      String
  client        Client   @relation(fields: [clientId], references: [id], onDelete: Cascade)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  distributedItems DistributedItem[]
  orderItems       OrderItem[]
  stockMovements   StockMovement[]

  @@map("linen_items")
}

model Order {
  id          String   @id @default(cuid())
  title       String
  clientId    String
  client      Client   @relation(fields: [clientId], references: [id], onDelete: Cascade)
  status      String   @default("open") // open, in_progress, completed, cancelled
  priority    String   @default("normal") // normal, high
  collectDate String
  deliveryDate String
  plannedKg   Float?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  orderItems  OrderItem[]

  @@map("orders")
}

model OrderItem {
  id          String     @id @default(cuid())
  orderId     String
  order       Order      @relation(fields: [orderId], references: [id], onDelete: Cascade)
  linenItemId String
  linenItem   LinenItem  @relation(fields: [linenItemId], references: [id])
  quantity    Int
  createdAt   DateTime   @default(now())

  @@map("order_items")
}

model StockMovement {
  id          String     @id @default(cuid())
  linenItemId String
  linenItem   LinenItem  @relation(fields: [linenItemId], references: [id])
  type        String     // in, out, adjustment
  quantity    Int
  reason      String?
  createdAt   DateTime   @default(now())

  @@map("stock_movements")
}

model Cage {
  id        String   @id @default(cuid())
  code      String   @unique
  tare      Float
  clientId  String
  client    Client   @relation(fields: [clientId], references: [id], onDelete: Cascade)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  weighingEntries WeighingEntry[]

  @@map("cages")
}

model WeighingControl {
  id                    String   @id @default(cuid())
  clientId              String
  client                Client   @relation(fields: [clientId], references: [id], onDelete: Cascade)
  kind                  String   // limpa, suja
  laundryGrossWeight    Float
  clientTotalNetWeight  Float    @default(0)
  differenceWeight      Float    @default(0)
  differencePercent     Float    @default(0)
  expectedDate          String?
  status                String   @default("active") // active, completed, cancelled
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  // Relations
  entries               WeighingEntry[]

  @@map("weighing_controls")
}

model WeighingEntry {
  id                String           @id @default(cuid())
  weighingControlId String
  weighingControl   WeighingControl  @relation(fields: [weighingControlId], references: [id], onDelete: Cascade)
  cageId            String
  cage              Cage             @relation(fields: [cageId], references: [id])
  clothingType      String
  tare              Float
  grossWeight       Float
  netWeight         Float
  pieceCount        Int
  timestamp         DateTime         @default(now())

  @@map("weighing_entries")
}

model DistributedItem {
  id          String     @id @default(cuid())
  linenItemId String
  linenItem   LinenItem  @relation(fields: [linenItemId], references: [id])
  bedId       String
  bed         Bed        @relation(fields: [bedId], references: [id])
  orderId     String?
  order       Order?     @relation(fields: [orderId], references: [id])
  quantity    Int
  status      String     @default("allocated") // allocated, collected, in_transit
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@map("distributed_items")
}